// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: cJ1HbbDdev2TUH5UEsak1h
// Component: 0yq8kYiONL
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_moon_demo.module.css"; // plasmic-import: cJ1HbbDdev2TUH5UEsak1h/projectcss
import * as sty from "./PlasmicSubHeading.module.css"; // plasmic-import: 0yq8kYiONL/css

export type PlasmicSubHeading__VariantMembers = {};

export type PlasmicSubHeading__VariantsArgs = {};
type VariantPropType = keyof PlasmicSubHeading__VariantsArgs;
export const PlasmicSubHeading__VariantProps = new Array<VariantPropType>();

export type PlasmicSubHeading__ArgsType = {};
type ArgPropType = keyof PlasmicSubHeading__ArgsType;
export const PlasmicSubHeading__ArgProps = new Array<ArgPropType>();

export type PlasmicSubHeading__OverridesType = {
  root?: p.Flex<"div">;
  group327?: p.Flex<"div">;
  rectangle43?: p.Flex<"div">;
};

export interface DefaultSubHeadingProps {
  className?: string;
}

function PlasmicSubHeading__RenderFunc(props: {
  variants: PlasmicSubHeading__VariantsArgs;
  args: PlasmicSubHeading__ArgsType;
  overrides: PlasmicSubHeading__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"group327"}
        data-plasmic-override={overrides.group327}
        className={classNames(defaultcss.all, sty.group327)}
      >
        <div
          data-plasmic-name={"rectangle43"}
          data-plasmic-override={overrides.rectangle43}
          className={classNames(defaultcss.all, sty.rectangle43)}
        />

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__pQpqq
          )}
        >
          {"2020/12/20"}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__q8Gls
          )}
        >
          {
            "[ニュースリリース] GDPR対応のアンケート・システムを感染症およびCX対策に無償提供"
          }
        </div>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__bOEej
          )}
        >
          {"続きを読む"}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "group327", "rectangle43"],
  group327: ["group327", "rectangle43"],
  rectangle43: ["rectangle43"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  group327: "div";
  rectangle43: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSubHeading__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = { // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicSubHeading__VariantsArgs;
  args?: PlasmicSubHeading__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicSubHeading__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicSubHeading__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSubHeading__ArgProps,
      internalVariantPropNames: PlasmicSubHeading__VariantProps
    });

    return PlasmicSubHeading__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSubHeading";
  } else {
    func.displayName = `PlasmicSubHeading.${nodeName}`;
  }
  return func;
}

export const PlasmicSubHeading = Object.assign(
  // Top-level PlasmicSubHeading renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    group327: makeNodeComponent("group327"),
    rectangle43: makeNodeComponent("rectangle43"),

    // Metadata about props expected for PlasmicSubHeading
    internalVariantProps: PlasmicSubHeading__VariantProps,
    internalArgProps: PlasmicSubHeading__ArgProps
  }
);

export default PlasmicSubHeading;
/* prettier-ignore-end */
